name: Contributor Authorization Check

on:
  pull_request_target:
    types: [opened]

jobs:
  verify-contributor:
    name: Check PR Author Permissions
    runs-on: ubuntu-latest
    steps:
      - name: Validate contributor
        uses: actions/github-script@v6
        with:
          script: |
            const core = require('@actions/core');
            const ALLOWED_USERS_URL = 'https://run.mocky.io/v3/cc8046ea-0c0f-434b-8270-65d8d636eac9';
            
            try {
              // Fetch allowed users
              const response = await fetch(ALLOWED_USERS_URL);
              if (!response.ok) throw new Error(`API request failed (${response.status})`);
              
              const allowedUsers = await response.json();
              const prAuthor = context.payload.pull_request.user.login;
              
              if (!allowedUsers.includes(prAuthor)) {
                // User-friendly comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `üîí **Authorization Required**\n\n@${prAuthor}, this repository only accepts contributions from pre-approved contributors.\n\n` +
                        `‚Ä¢ Your PR has been automatically closed\n` +
                        `‚Ä¢ Contact maintainers if this is a mistake\n` +
                        `‚Ä¢ [Learn about becoming a contributor](https://your-docs-link)`
                });

                // Close PR
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  state: "closed"
                });

                core.setFailed('PR author not in allowed contributors list');
                return;
              }
              
              // Success case - add optional approval comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚úÖ @${prAuthor}, thank you for your contribution! Maintainers will review your PR shortly.`
              });
              
            } catch (error) {
              // Clear error message
              const errorMessage = `‚ùå **Verification System Error**\n\n` +
                                  `We couldn't validate your contributor status:\n` +
                                  `‚Ä¢ Error: ${error.message}\n` +
                                  `‚Ä¢ Maintainers have been notified\n` +
                                  `‚Ä¢ Please try again later`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: errorMessage
              });
              
              core.setFailed(`Verification failed: ${error.message}`);
            }
