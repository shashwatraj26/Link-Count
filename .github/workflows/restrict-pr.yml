name: Restrict PR Authors

on:
  pull_request_target:
    types: [opened]

jobs:
  check-pr-author:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR Author
        uses: actions/github-script@v6
        with:
          script: |
            // Configuration - Set your URL here
            const ALLOWED_USERS_URL = 'https://run.mocky.io/v3/cc8046ea-0c0f-434b-8270-65d8d636eac9';
           
            try {
              // Fetch allowed users from URL
              const response = await fetch(ALLOWED_USERS_URL);
              if (!response.ok) throw new Error(`HTTP ${response.status}`);
             
              const allowedUsers = await response.json();
              const prAuthor = context.payload.pull_request.user.login;
             
              if (!allowedUsers.includes(prAuthor)) {
                // Comment on PR
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `⛔️ **Access Denied**\n\nSorry @${prAuthor}, only authorized contributors may submit PRs to this repository.\n\nYour PR has been closed.`
                });

                // Close PR
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  state: "closed"
                });
              }
            } catch (error) {
              // Error handling
              console.error('Error:', error);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `⚠️ **Verification Failed**\n\nCould not validate access: ${error.message}\n\nMaintainers have been notified.`
              });
            }
